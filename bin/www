#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var onlineUsers = {};
var onlineCount = 0;
io.on('connection', function(socket) {

    //监听用户登录
    socket.on('login', function(data) {
        //用户登录   加入在线用户列表中， 在线人数自增;
        onlineUsers[data.userid] = { id: data.userid, jointime: data.jointime, username:data.username||"匿名用户"};
        socket.name = data.userid ;
        console.log(socket.name + "加入");
        onlineCount = onlineCount + 1;
        io.emit('loginReturn', { onlineCount: onlineCount, onlineUsers: onlineUsers });
    });

    socket.on('clientSend', function(data) {
        console.log(data);
        io.emit('serverSend', data);
    });

    //监听用户退出
    socket.on('disconnect', function(data) {  
        console.log(socket.name,"退出");
        if (socket.name) {
            onlineCount--;
            io.emit("userexit",{onlineCount:onlineCount,outUser:onlineUsers[socket.name]});
            delete onlineUsers[socket.name]; 
        }
        
    })
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    console.log('onListening');
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}